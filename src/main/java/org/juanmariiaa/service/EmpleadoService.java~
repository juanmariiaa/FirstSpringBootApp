package org.juanmariiaa.service;

import org.juanmariiaa.model.Empleado;
import org.juanmariiaa.repository.EmpleadoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmpleadoService {

    @Autowired
    private EmpleadoRepository empleadoRepository;

    // Método para obtener todos los empleados
    public List<Empleado> obtenerTodosLosEmpleados() {
        return empleadoRepository.findAll();
    }

    // Método para obtener un empleado por su ID
    public Optional<Empleado> obtenerEmpleadoPorId(Long id) {
        return empleadoRepository.findById(id);
    }

    // Método para guardar un nuevo empleado
    public Empleado guardarEmpleado(Empleado empleado) {
        return empleadoRepository.save(empleado);
    }

    public Empleado actualizarEmpleado(Long id, Empleado empleado) {
        // Verificar si existe el empleado con el id proporcionado
        if (empleadoRepository.existsById(id)) {
            // Recuperar el empleado existente de la base de datos
            Empleado empleadoExistente = empleadoRepository.findById(id).orElseThrow(() -> new RuntimeException("Empleado no encontrado"));

            // Actualizar solo los campos necesarios (sin modificar el id)
            empleadoExistente.setNombre(empleado.getNombre());
            empleadoExistente.setCorreo(empleado.getCorreo());
            empleadoExistente.setSalario(empleado.getSalario());
            empleadoExistente.setDepartamento(empleado.getDepartamento());
            empleadoExistente.setProyectos(empleado.getProyectos());

            // Guardar el empleado actualizado
            return empleadoRepository.save(empleadoExistente);
        }
        return null; // O lanzar una excepción si el empleado no existe
    }


    // Método para eliminar un empleado por su ID
    public void eliminarEmpleado(Long id) {
        empleadoRepository.deleteById(id);
    }

}
